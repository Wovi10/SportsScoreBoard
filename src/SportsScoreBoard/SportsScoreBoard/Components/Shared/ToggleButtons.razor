@using SportsScoreBoard.Components.Shared
@using SportsScoreBoard.Models
@using SportsScoreBoard.Models.Volleyball
<MudStack Row="true" Wrap="Wrap.Wrap" Class="mb-3">
    <SettingsButton OnClick="OnShowServeClick"
                    Active="SettingsBase.ShowServing"
                    Text="Show serving team"
                    Visible="ServeVisible"
                    />
    <SettingsButton OnClick="OnShowSetsClick"
                    Active="SettingsBase.ShowSets"
                    Text="Show sets"
                    Visible="SetsVisible"/>
    <SettingsButton OnClick="OnShowTimeoutsClick"
                    Active="SettingsBase.ShowTimeouts"
                    Text="Show timeouts"
                    Visible="TimeoutsVisible"/>
    <SettingsButton OnClick="OnShowPreviousSetsClick"
                    Active="SettingsBase.ShowPreviousSets"
                    Text="Show previous set scores"
                    Visible="PreviousSetsVisible"/>
    <SettingsButton OnClick="OnShowManualScoresClick"
                    Active="SettingsBase.ShowManualScoring"
                    Text="Show manual scoring"
                    Visible="ManualScoreVisible"/>
    <SettingsButton OnClick="OnShowTeamNamesClick"
                    Active="SettingsBase.ShowTeamNames"
                    Text="Show team names"
                    Visible="TeamNamesVisible"/>
    <SettingsButton OnClick="OnShowTimerClick"
                    Active="SettingsBase.ShowTimer"
                    Text="Show timer"
                    Visible="TimerVisible"/>
</MudStack>

@code {

    [Parameter] public required Models.ToggleButtons[] VisibleButtons { get; set; }
    [Parameter] public required SettingsBase SettingsBase { get; set; }
    [Parameter] public required EventCallback ToggleShowServing { get; set; }
    [Parameter] public required EventCallback ToggleShowSets { get; set; }
    [Parameter] public required EventCallback ToggleShowTimeouts { get; set; }
    [Parameter] public required EventCallback ToggleShowPreviousSets { get; set; }
    [Parameter] public required EventCallback ToggleManualScoring { get; set; }
    [Parameter] public required EventCallback ToggleShowTeamNames { get; set; }
    [Parameter] public required EventCallback ToggleShowTimer { get; set; }

    private bool IsVisible(Models.ToggleButtons button)
        => VisibleButtons.Contains(button);

    private bool ServeVisible => IsVisible(Models.ToggleButtons.Serving);
    private bool SetsVisible => IsVisible(Models.ToggleButtons.Sets);
    private bool TimeoutsVisible => IsVisible(Models.ToggleButtons.Timeouts);
    private bool PreviousSetsVisible => IsVisible(Models.ToggleButtons.PreviousSets);
    private bool ManualScoreVisible => IsVisible(Models.ToggleButtons.ManualScoring);
    private bool TeamNamesVisible => IsVisible(Models.ToggleButtons.TeamNames);
    private bool TimerVisible => IsVisible(Models.ToggleButtons.Timer);

    private async Task OnShowServeClick(MouseEventArgs obj)
        => await ToggleShowServing.InvokeAsync();

    private async Task OnShowSetsClick(MouseEventArgs obj)
        => await ToggleShowSets.InvokeAsync();

    private async Task OnShowTimeoutsClick(MouseEventArgs obj)
        => await ToggleShowTimeouts.InvokeAsync();

    private async Task OnShowPreviousSetsClick(MouseEventArgs obj)
        => await ToggleShowPreviousSets.InvokeAsync();

    private async Task OnShowManualScoresClick(MouseEventArgs obj)
        => await ToggleManualScoring.InvokeAsync();

    private async Task OnShowTeamNamesClick(MouseEventArgs obj)
        => await ToggleShowTeamNames.InvokeAsync();

    private async Task OnShowTimerClick(MouseEventArgs obj)
        => await ToggleShowTimer.InvokeAsync();
}