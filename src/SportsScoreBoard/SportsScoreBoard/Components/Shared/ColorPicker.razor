@using MudBlazor.Utilities
<MudColorPicker @ref="_colorPicker"
                ShowToolbar="true"
                PickerVariant="PickerVariant"
                ColorPickerView="ColorPickerView"
                ColorPickerMode="ColorPickerMode"
                PickerOpened="OnPickerOpened"
                PickerClosed="OnPickerClosed"
                ShowAlpha="ShowAlpha"
                ShowInputs="ShowInputs"
                ShowSliders="ShowSliders"
                ShowPreview="ShowPreview"
                Rounded="Rounded"
                Style="@(ShouldShowBackground ? $"background-color: {_colorValue}" : "")"
                Label="@FieldLabel"
                bind-Value="@Colour"
                ValueChanged="OnColorChanged"/>

@code {
    [Parameter] public required EventCallback<MudColor> ColourChanged { get; set; }
    [Parameter] public required string FieldLabel { get; set; }
    [Parameter] public PickerVariant PickerVariant { get; set; } = PickerVariant.Dialog;
    [Parameter] public ColorPickerView ColorPickerView { get; set; } = ColorPickerView.GridCompact;
    [Parameter] public ColorPickerMode ColorPickerMode { get; set; } = ColorPickerMode.RGB;
    [Parameter] public bool ShowAlpha { get; set; }
    [Parameter] public bool ShowInputs { get; set; }
    [Parameter] public bool ShowSliders { get; set; }
    [Parameter] public bool ShowPreview { get; set; }
    [Parameter] public bool Rounded { get; set; }
    [Parameter] public bool ShowBackgroundColor { get; set; }
    [Parameter] public MudColor? Colour { get; set; }

    private MudColorPicker? _colorPicker;
    private string? _colorValue;
    private bool _pickerOpened = false;
    private bool ShouldShowBackground => ShowBackgroundColor && !_pickerOpened && !string.IsNullOrWhiteSpace(_colorValue);

    private async Task OnColorChanged(MudColor mudColor)
    {
        _colorValue = mudColor.Value;
        await ColourChanged.InvokeAsync(mudColor);
    }

    private void OnPickerOpened()
        => _pickerOpened = true;

    private void OnPickerClosed()
        => _pickerOpened = false;

    public void ResetMe()
    {
        _colorPicker.Text = null;
        _colorValue = null;
    }

}