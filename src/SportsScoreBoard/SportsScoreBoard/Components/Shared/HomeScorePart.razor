@using SportsScoreBoard.Models

<MudStack Row="true" Wrap="Wrap.Wrap">
    <MudGrid Class="d-flex ma-0 pa-0"
             Style="@(Team.IsHome ? "flex-direction: row-reverse" : "flex-direction: row")">
        @if (Settings.ShowTeamNames)
        {
            <MudItem md="6" Style="justify-content: flex-end" Class="mx-0 px-0 me-2">
                <TeamName Team="Team"
                          ChangeTeamName="ChangeTeamName"/>
            </MudItem>
        }
        <MudItem xs="12" Class="mx-0 px-0 me-2">
            <MudContainer Class="d-flex flex-grow-1 justify-end flex-wrap mx-0 px-0">
                <MudStack Class="mx-5">
                    <SetComponent IsVisible="Settings.ShowSets"
                                  Style="justify-content: flex-end"
                                  Sets="@Sets"/>

                    <TimeoutPart IsVisible="Settings.ShowTimeouts"
                                 TimeoutsClicked="OnTimeoutsClicked"
                                 Style="justify-content: flex-end"
                                 Timeouts="Team.Timeouts"/>
                </MudStack>
                <div class="flex-grow-1">
                    <ScorePart Settings="Settings"
                               Score="@Points"
                               Team="@Team"
                               Game="Game"
                               IncrementScore="IncrementScore"
                               DecrementScore="DecrementScore"/>
                </div>
            </MudContainer>
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    [Parameter] public required SportsGameBase Game { get; set; }
    [Parameter] public required SettingsBase Settings { get; set; }
    [Parameter] public required TeamBase Team { get; set; }
    [Parameter] public required int Points { get; set; }
    [Parameter] public required int Sets { get; set; }
    [Parameter] public required EventCallback<int> IncrementScore { get; set; }
    [Parameter] public required EventCallback<int> DecrementScore { get; set; }
    [Parameter] public required EventCallback<string> ChangeTeamName { get; set; }

    private void OnTimeoutsClicked()
        => Team.TimeoutsClicked();
}